// ==UserScript==
// @name           IITC plugin: RVA Farms
// @namespace      rvafarms
// @match          https://*.ingress.com/intel*
// @match          https://*.ingress.com/mission*
// @run-at         document-start
// @downloadURL    https://gist.github.com/sleviathanz/4db6467939897943e446/raw/5a3d422ce79b37d83076ec897ed3683666619b4e/IITC_plugin_RVA_Farms.user.js
// @version        1.1
// @grant          none
// ==/UserScript==

function wrapper(plugin_info) {

// ensure plugin framework is there, even if iitc is not yet loaded
if(typeof window.plugin !== 'function') window.plugin = function() {};

//PLUGIN AUTHORS: writing a plugin outside of the IITC build environment? if so, delete these lines!!
//(leaving them in place might break the 'About IITC' page or break update checks)
plugin_info.buildName = 'iitc';
plugin_info.dateTimeVersion = '20150917.154202';
plugin_info.pluginId = 'rvafarms';
//END PLUGIN AUTHORS NOTE

var sort_by = function(field, reverse, primer){
   var key = primer ?
       function(x) {return primer(x[field]);} :
       function(x) {return x[field];};
   reverse = !reverse ? 1 : -1;
   return function (a, b) {
       return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
     };
};

// ADD FARMS BELOW, Just copy the top farm and edit the data.  Farms with
// automatically alphabetize.  The last farm line should not end in with a comma.
var jsonFarms = [
  {"farm":"Browns","coords":"37.53476,-77.443268","zoom":"18"},
  {"farm":"Echo Lake","coords":"37.67245,-77.547652","zoom":"17"},
  {"farm":"Woodlake","coords":"37.408789,-77.679842","zoom":"17"},
  {"farm":"Mrkt Square","coords":"37.422773,-77.636304","zoom":"17"},
  {"farm":"CC","coords":"37.376307,-77.506529","zoom":"18"},
  {"farm":"Claremont","coords":"37.22739,-76.964153","zoom":"16"},
  {"farm":"Crump","coords":"37.675643,-77.51554","zoom":"16"},
  {"farm":"Parkers","coords":"37.349008,-77.394463","zoom":"18"},
  {"farm":"Rockwood","coords":"37.449276,-77.582424","zoom":"16"},
  {"farm":"Hollywood","coords":"37.536198,-77.456371","zoom":"16"},
  {"farm":"Sunday Park","coords":"37.421082,-77.649935","zoom":"17"},
  {"farm":"Malvern","coords":"37.416655,-77.249326","zoom":"16"},
  {"farm":"MCV","coords":"37.540505,-77.430023","zoom":"18"},
  {"farm":"Short Pump","coords":"37.656165,-77.619256","zoom":"18"},
  {"farm":"City Point","coords":"37.312999,-77.2756","zoom":"16"},
  {"farm":"Drewery's","coords":"37.421533,-77.424281","zoom":"17"},
  {"farm":"Harrisons","coords":"37.427259,-77.372798","zoom":"17"},
  {"farm":"Henricus","coords":"37.374876,-77.361501","zoom":"17"},
  {"farm":"LadySmith","coords":"38.026433,-77.520931","zoom":"17"},
  {"farm":"Lewis Ginter","coords":"37.62018,-77.470737","zoom":"17"},
  {"farm":"Libby","coords":"37.526971,-77.417186","zoom":"18"},
  {"farm":"Loop","coords":"37.541332,-77.438089","zoom":"17"},
  {"farm":"Powhatan","coords":"37.541436,-77.917901","zoom":"18"},
  {"farm":"PBurg","coords":"37.229363,-77.404647","zoom":"16"},
  {"farm":"St Eds","coords":"37.531219,-77.593303","zoom":"18"},
  {"farm":"Surry","coords":"37.135363,-76.833133","zoom":"16"},
  {"farm":"Ft Stevens","coords":"37.403731,-77.430136","zoom":"18"},
  {"farm":"Stony Pt","coords":"37.550349,-77.571845","zoom":"17"},
  {"farm":"U of R","coords":"37.575812,-77.539433","zoom":"17"},
  {"farm":"VCU","coords":"37.546734,-77.452063","zoom":"17"},
  {"farm":"South Jordan","coords":"40.554374,-111.907597","zoom":"15"},
  ];

jsonFarms.sort(sort_by('farm', false, function(a){return a.toUpperCase();}));

// PLUGIN START ////////////////////////////////////////////////////////
    
// use own namespace for plugin
window.plugin.rvafarms = function() {};
window.plugin.rvafarms.listPortals = [];
window.plugin.rvafarms.sortBy = 1; // second column: level
window.plugin.rvafarms.sortOrder = -1;
window.plugin.rvafarms.enlP = 0;
window.plugin.rvafarms.resP = 0;
window.plugin.rvafarms.neuP = 0;
window.plugin.rvafarms.filter = 0;

window.plugin.rvafarms.fields = [
  {
    title: "Portal Name",
    value: function(portal) { return portal.options.data.title; },
    sortValue: function(value, portal) { return value.toLowerCase(); },
    format: function(cell, portal, value) {
      $(cell)
        .append(plugin.rvafarms.getPortalLink(portal))
        .addClass("portalTitle");
    }
  },
  {
    title: "Level",
    value: function(portal) { return portal.options.data.level; },
    format: function(cell, portal, value) {
      $(cell)
        .css('background-color', COLORS_LVL[value])
        .text('L' + value);
    },
    defaultOrder: -1,
  },
  {
    title: "Team",
    value: function(portal) { return portal.options.team; },
    format: function(cell, portal, value) {
      $(cell).text(['NEU', 'RES', 'ENL'][value]);
    }
  },
  {
    title: "Health",
    value: function(portal) { return portal.options.data.health; },
    sortValue: function(value, portal) { return portal.options.team===TEAM_NONE ? -1 : value; },
    format: function(cell, portal, value) {
      $(cell)
        .addClass("alignR")
        .text(portal.options.team===TEAM_NONE ? '-' : value+'%');
    },
    defaultOrder: -1,
  },
  {
    title: "Res",
    value: function(portal) { return portal.options.data.resCount; },
    format: function(cell, portal, value) {
      $(cell)
        .addClass("alignR")
        .text(value);
    },
    defaultOrder: -1,
  },
  {
    title: "Links",
    value: function(portal) { return window.getPortalLinks(portal.options.guid); },
    sortValue: function(value, portal) { return value.in.length + value.out.length; },
    format: function(cell, portal, value) {
      $(cell)
        .addClass("alignR")
        .addClass('help')
        .attr('title', 'In:\t' + value.in.length + '\nOut:\t' + value.out.length)
        .text(value.in.length+value.out.length);
    },
    defaultOrder: -1,
  },
  {
    title: "Fields",
    value: function(portal) { return getPortalFieldsCount(portal.options.guid); },
    format: function(cell, portal, value) {
      $(cell)
        .addClass("alignR")
        .text(value);
    },
    defaultOrder: -1,
  },
  {
    title: "AP",
    value: function(portal) {
      var links = window.getPortalLinks(portal.options.guid);
      var fields = getPortalFieldsCount(portal.options.guid);
      return portalApGainMaths(portal.options.data.resCount, links.in.length+links.out.length, fields);
    },
    sortValue: function(value, portal) { return value.enemyAp; },
    format: function(cell, portal, value) {
      var title = '';
      if (teamStringToId(PLAYER.team) == portal.options.team) {
        title += 'Friendly AP:\t'+value.friendlyAp+'\n'  + '- deploy '+(8-portal.options.data.resCount)+' resonator(s)\n'+ '- upgrades/mods unknown\n';
      }
      title += 'Enemy AP:\t'+value.enemyAp+'\n' + '- Destroy AP:\t'+value.destroyAp+'\n' + '- Capture AP:\t'+value.captureAp;

      $(cell)
        .addClass("alignR")
        .addClass('help')
        .prop('title', title)
        .html(digits(value.enemyAp));
    },
    defaultOrder: -1,
  },
];

//fill the listPortals array with portals avaliable on the map (level filtered portals will not appear in the table)
window.plugin.rvafarms.getPortals = function() {
  //filter : 0 = All, 1 = Neutral, 2 = Res, 3 = Enl, -x = all but x
  var retval=false;

  var displayBounds = map.getBounds();

  window.plugin.rvafarms.listPortals = [];
  $.each(window.portals, function(i, portal) {
    // eliminate offscreen portals (selected, and in padding)
    if(!displayBounds.contains(portal.getLatLng())) return true;

    retval=true;

    switch (portal.options.team) {
      case TEAM_RES:
        window.plugin.rvafarms.resP++;
        break;
      case TEAM_ENL:
        window.plugin.rvafarms.enlP++;
        break;
      default:
        window.plugin.rvafarms.neuP++;
    }

    // cache values and DOM nodes
    var obj = { portal: portal, values: [], sortValues: [] };

    var row = document.createElement('tr');
    row.className = TEAM_TO_CSS[portal.options.team];
    obj.row = row;

    var cell = row.insertCell(-1);
    cell.className = 'alignR';

    window.plugin.rvafarms.fields.forEach(function(field, i) {
      cell = row.insertCell(-1);

      var value = field.value(portal);
      obj.values.push(value);

      obj.sortValues.push(field.sortValue ? field.sortValue(value, portal) : value);

      if(field.format) {
        field.format(cell, portal, value);
      } else {
        cell.textContent = value;
      }
    });

    window.plugin.rvafarms.listPortals.push(obj);
  });

  return retval;
};

window.plugin.rvafarms.displayPL = function(x,y,zoom) {
	var list;
	var done = false;

	window.map.setView([x,y],zoom);

		  // plugins (e.g. bookmarks) can insert fields before the standard ones - so we need to search for the 'level' column
		  window.plugin.rvafarms.sortBy = window.plugin.rvafarms.fields.map(function(f){return f.title;}).indexOf('Level');
		  window.plugin.rvafarms.sortOrder = -1;
		  window.plugin.rvafarms.enlP = 0;
		  window.plugin.rvafarms.resP = 0;
		  window.plugin.rvafarms.neuP = 0;
		  window.plugin.rvafarms.filter = 0;

  (function waitforload() {

  done = window.plugin.rvafarms.getPortals();

    if ( done ) {

      list = window.plugin.rvafarms.portalTable(window.plugin.rvafarms.sortBy, window.plugin.rvafarms.sortOrder,window.plugin.rvafarms.filter);

		  if(window.useAndroidPanes()) {
			  $('<div id="rvafarms" class="mobile">').append(list).appendTo(document.body);
		  } else {
			dialog({
			  html: $('<div id="rvafarms">').append(list),
			  dialogClass: 'ui-dialog-rvafarms',
			  title: 'Portal list: ' + window.plugin.rvafarms.listPortals.length + ' ' + (window.plugin.rvafarms.listPortals.length == 1 ? 'portal' : 'portals'),
			  id: 'portal-list',
			  width: 700
			});
		  }
     } else {
		setTimeout( waitforload, 2000 );
    }
	})();
};

window.plugin.rvafarms.portalTable = function(sortBy, sortOrder, filter) {
  // save the sortBy/sortOrder/filter
  window.plugin.rvafarms.sortBy = sortBy;
  window.plugin.rvafarms.sortOrder = sortOrder;
  window.plugin.rvafarms.filter = filter;

  var portals = window.plugin.rvafarms.listPortals;
  var sortField = window.plugin.rvafarms.fields[sortBy];

  portals.sort(function(a, b) {
    var valueA = a.sortValues[sortBy];
    var valueB = b.sortValues[sortBy];

    if(sortField.sort) {
      return sortOrder * sortField.sort(valueA, valueB, a.portal, b.portal);
    }

    return sortOrder *
      (valueA < valueB ? -1 :
      valueA > valueB ?  1 :
      0);
  });

  if(filter !== 0) {
    portals = portals.filter(function(obj) {
      return filter < 0 ? obj.portal.options.team+1 != -filter : obj.portal.options.team+1 == filter;
    });
  }

  var table, row, cell;
  var container = $('<div>');

  table = document.createElement('table');
  table.className = 'filter';
  container.append(table);

  row = table.insertRow(-1);

  var length = window.plugin.rvafarms.listPortals.length;

  ["All", "Neutral", "Resistance", "Enlightened"].forEach(function(label, i) {
    cell = row.appendChild(document.createElement('th'));
    cell.className = 'filter' + label.substr(0, 3);
    cell.textContent = label+':';
    cell.title = 'Show only portals of this color';
    $(cell).click(function() {
      $('#rvafarms').empty().append(window.plugin.rvafarms.portalTable(sortBy, sortOrder, i));
    });


    cell = row.insertCell(-1);
    cell.className = 'filter' + label.substr(0, 3);
    if(i !== 0) cell.title = 'Hide portals of this color';
    $(cell).click(function() {
      $('#rvafarms').empty().append(window.plugin.rvafarms.portalTable(sortBy, sortOrder, -i));
    });

    switch(i-1) {
      case -1:
        cell.textContent = length;
        break;
      case 0:
        cell.textContent = window.plugin.rvafarms.neuP + ' (' + Math.round(window.plugin.rvafarms.neuP/length*100) + '%)';
        break;
      case 1:
        cell.textContent = window.plugin.rvafarms.resP + ' (' + Math.round(window.plugin.rvafarms.resP/length*100) + '%)';
        break;
      case 2:
        cell.textContent = window.plugin.rvafarms.enlP + ' (' + Math.round(window.plugin.rvafarms.enlP/length*100) + '%)';
    }
  });

  table = document.createElement('table');
  table.className = 'portals';
  container.append(table);

  var thead = table.appendChild(document.createElement('thead'));
  row = thead.insertRow(-1);

  cell = row.appendChild(document.createElement('th'));
  cell.textContent = '#';

  window.plugin.rvafarms.fields.forEach(function(field, i) {
    cell = row.appendChild(document.createElement('th'));
    cell.textContent = field.title;
    if(field.sort !== null) {
      cell.classList.add("sortable");
      if(i == window.plugin.rvafarms.sortBy) {
        cell.classList.add("sorted");
      }

      $(cell).click(function() {
        var order;
        if(i == sortBy) {
          order = -sortOrder;
        } else {
          order = field.defaultOrder < 0 ? -1 : 1;
        }

        $('#rvafarms').empty().append(window.plugin.rvafarms.portalTable(i, order, filter));
      });
    }
  });

  portals.forEach(function(obj, i) {
    var row = obj.row;
    if(row.parentNode) row.parentNode.removeChild(row);

    row.cells[0].textContent = i+1;

    table.appendChild(row);
  });

  container.append('<div class="disclaimer">Click on portals table headers to sort by that column. ' + 'Click on <b>All, Neutral, Resistance, Enlightened</b> to only show portals owner by that faction or on the number behind the factions to show all but those portals.</div>');

  return container;
};

window.plugin.rvafarms.getPortalLink = function(portal) {
  var coord = portal.getLatLng();
  var perma = '/intel?ll='+coord.lat+','+coord.lng+'&z=17&pll='+coord.lat+','+coord.lng;

  var link = document.createElement("a");
  link.textContent = portal.options.data.title;
  link.href = perma;
  link.addEventListener("click", function(ev) {
    renderPortalDetails(portal.options.guid);
    ev.preventDefault();
    return false;
  }, false);
  link.addEventListener("dblclick", function(ev) {
    zoomToAndShowPortal(portal.options.guid, [coord.lat, coord.lng]);
    ev.preventDefault();
    return false;
  });
  return link;
};

window.plugin.rvafarms.onPaneChanged = function(pane) {
  if(pane == "plugin-rvafarms")
    window.plugin.rvafarms.displayPL();
  else
    $("#rvafarms").remove();
};

var setup =  function() {
  //if(window.useAndroidPanes()) {
  //  android.addPane("plugin-rvafarms", "RVA Farms", "ic_action_paste");
  //  addHook("paneChanged", window.plugin.rvafarms.onPaneChanged);
  //} else {

    $("#toolbox").after('<div id="rvafarms-toolbox" style="margin-left:5px;"></div>');
    $('#rvafarms-toolbox').append('<b>RVAR Farms</b>');
    $('#rvafarms-toolbox').append('<ul id="rvafarms-list" style=" list-style:none;padding:0px;margin:0px;-moz-column-count: 3; -webkit-column-count: 3; column-count: 3;"></ul>');

    $.each(jsonFarms, function(idx, obj) {
        $('#rvafarms-list').append('<li><a onclick="window.plugin.rvafarms.displayPL('+obj.coords+','+obj.zoom+')" title="" accesskey="t">'+obj.farm+'</a></li> ');
    });
  //}

  $("<style>")
    .prop("type", "text/css")
    .html("#rvafarms.mobile {\n  background: transparent;\n  border: 0 none !important;\n  height: 100% !important;\n  width: 100% !important;\n  left: 0 !important;\n  top: 0 !important;\n  position: absolute;\n  overflow: auto;\n}\n\n#rvafarms table {\n  margin-top: 5px;\n  border-collapse: collapse;\n  empty-cells: show;\n  width: 100%;\n  clear: both;\n}\n\n#rvafarms table td, #rvafarms table th {\n  background-color: #1b415e;\n  border-bottom: 1px solid #0b314e;\n  color: white;\n  padding: 3px;\n}\n\n#rvafarms table th {\n  text-align: center;\n}\n\n#rvafarms table .alignR {\n  text-align: right;\n}\n\n#rvafarms table.portals td {\n  white-space: nowrap;\n}\n\n#rvafarms table th.sortable {\n  cursor: pointer;\n}\n\n#rvafarms table .portalTitle {\n  min-width: 120px !important;\n  max-width: 240px !important;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n#rvafarms .sorted {\n  color: #FFCE00;\n}\n\n#rvafarms table.filter {\n  table-layout: fixed;\n  cursor: pointer;\n  border-collapse: separate;\n  border-spacing: 1px;\n}\n\n#rvafarms table.filter th {\n  text-align: left;\n  padding-left: 0.3em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n#rvafarms table.filter td {\n  text-align: right;\n  padding-right: 0.3em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n#rvafarms .filterNeu {\n  background-color: #666;\n}\n\n#rvafarms table tr.res td, #rvafarms .filterRes {\n  background-color: #005684;\n}\n\n#rvafarms table tr.enl td, #rvafarms .filterEnl {\n  background-color: #017f01;\n}\n\n#rvafarms table tr.none td {\n  background-color: #000;\n}\n\n#rvafarms .disclaimer {\n  margin-top: 10px;\n  font-size: 10px;\n}\n\n#rvafarms.mobile table.filter tr {\n  display: block;\n  text-align: center;\n}\n#rvafarms.mobile table.filter th, #rvafarms.mobile table.filter td {\n  display: inline-block;\n  width: 22%;\n}\n\n")
    .appendTo("head");

};

// PLUGIN END //////////////////////////////////////////////////////////


setup.info = plugin_info; //add the script info data to the function as a property
if(!window.bootPlugins) window.bootPlugins = [];
window.bootPlugins.push(setup);
// if IITC has already booted, immediately run the 'setup' function
if(window.iitcLoaded && typeof setup === 'function') setup();
} // wrapper end
// inject code into site context
var script = document.createElement('script');
var info = {};
if (typeof GM_info !== 'undefined' && GM_info && GM_info.script) info.script = { version: GM_info.script.version, name: GM_info.script.name, description: GM_info.script.description };
script.appendChild(document.createTextNode('('+ wrapper +')('+JSON.stringify(info)+');'));
(document.body || document.head || document.documentElement).appendChild(script);


